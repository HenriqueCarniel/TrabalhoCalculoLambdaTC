    let

    true = \x y. x;
    false = \x y. y;
    
    if = \b e1 e2. b e1 e2;

    not = \b. b false true;
    and = \b1 b2. if b1 b2 false;
    or = \b1 b2. if b1 true b2;

    succ = \n. \A B. A (n A B);

    add = \n1 n2. n1 succ n2;
    add2 = \n1 n2. \A B. n1 A (n2 A B);

    mult = \n1 n2. n1 (\x. add n2 x) 0;

    isZero = \n. n (\x. false) true;
    isPos = \n. not (isZero n); 

    pair = \a b. \c. c a b;
    fst = \p. p true;
    snd = \p. p false;

    swap = \p. pair (snd p) (fst p);
    shiftInc = \p. pair (snd p) (succ (snd p));
 
    -- (pred n) calcula n-1 se n>0, n se n=0 
    pred = \n. fst (n shiftInc (pair 0 0));

    -- (sub a b) calcula a - b
    sub = \a b. b pred a;

    -- (menor a b) testa a < b
    menor = \a b. isPos (sub b a);
    
    isOne = \n. if (isZero n)
                   false
                   (isZero (pred n));

    empty = \x. true;
    cons = pair;

    isEmpty = \l. l (\a b. false);
    head = fst;
    tail = snd;

    Y = \f. (\x. f (x x)) (\x. f (x x));

    igual = \a b. not (or (menor a b) (menor b a));
    polinomio = \a b. (add (mult a a) (mult 3 b));

    S_multQuatro = \R. \n. if (isZero n)
                                 true
                                 (if (isZero (pred n))
                                        false
                                        (if (isZero (pred n))
                                               false
                                               (if (isZero (pred n))
                                                      false
                                                      (R (pred n))
                                               )
                                        )
                                 );

    multQuatro = Y S_multQuatro;

    invFrac = \p. if (isZero (fst p)) p (swap p);
    multFrac = \p1 p2. pair 
                         (mult (fst p1) (fst p2))
                         (mult (snd p1) (snd p2));
    somaFrac = \p1 p2. pair
                         (add (mult (fst p1) (snd p2)) (mult (snd p1) (fst p2)))
                         (mult (snd p1) (snd p2));

    S_somaLista = \R. \l. if (isEmpty l) 0 (add (head l) (R (tail l)));
    somaLista = Y S_somaLista;

    S_lucas = \R. \n. if (isZero n)
                           2
                           (if (isOne n)
                              1
                              (add (R (pred n)) (R (pred (pred n)))));
    lucas = Y S_lucas;



in
    -- coco 3
    -- igual 6 6
    -- polinomio 3 3
    -- invFrac (pair 1 3)
    -- multFrac (pair 1 3) (pair 1 2)
    -- somaFrac (pair 2 4) (pair 2 2)
    -- somaLista (cons 2 (cons 3 (cons 7 empty)))
    lucas 3 
    